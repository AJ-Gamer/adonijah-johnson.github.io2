// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(twoDArray) {
  return twoDArray.reduce((flattenedArray, currentArray) => {
    return flattenedArray.concat(currentArray);
  }, []);
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  for (let n = value; test(n); n = update(n)) {
      body(n);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  for (let element of array) {
      if (!test(element)) {
          return false;
      }
  }
  return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text) {
  let writingDirections = countBy(text, char => {
    let script = characterScript(char.codePointAt(0));
    return script ? script.direction : null;
}).filter(direction => direction.name !== null);
  if (!writingDirections.length) {
    return null;
}
  else {
    const {name: dominantDirection} = writingDirections.reduce((dominantDirection, writingDirection) => {
        return (writingDirection.count > dominantDirection.count) ? writingDirection : dominantDirection;
    });

    return dominantDirection;
  }
}


// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
